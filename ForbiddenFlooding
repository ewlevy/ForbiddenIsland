import java.util.ArrayList;
import java.util.Random;
import tester.*;
import javalib.impworld.*;
import java.awt.Color;
import javalib.worldimages.*;

//Represents a single square of the game area
class Cell {

    // Color, position, and height of the cell
    double height;
    Color cellColor;
    Posn pos;
    boolean isFlooded;
    boolean floodDanger;

    // Init the whole cell
    Cell(double height, int x, int y) {
        this.height = height;
        this.pos = new Posn(x, y);
        
        //Set this Cell's color
        this.cellColor = this.colorGen(height);
        
        //Cell is not flooded at first
        this.isFlooded = false;
        this.floodDanger = false;
    }
    
    //Cell constructor with only two arguments
    Cell(int x, int y) {
        this.pos = new Posn(x, y);
    }
    
    //Color creator for areas above water assumes height (0,32]
    public Color colorGen(double height) {
        //White to green scale
        if(height > 0) {
            int rB = (int)(height * (255 / 32));
            int gR = (int)(height * (193 / 32) + 62);
            return new Color(rB, gR, rB);
        }
        //Blue to black scale
        else if(this.isFlooded) {
            int blue = (int)(128 + height * 12);
            return new Color(0, 0, Math.max(blue, 0));
        }
        //Green to red scale
        else {
            int red = (int)(-height * 8);
            int blue = (int)(62 + height*6);
            return new Color(Math.min(red, 255), Math.max(blue, 0), 0);
        }
    }

    // the four adjacent cells to this one
    Cell left, top, right, bottom;

    // Fixes this cell to include its neighbors
    public void cellLink(Cell neighbor, String dir) {
        if (dir.equals("right")) {
            this.right = neighbor;
        } 
        else if(dir.equals("left")) {
            this.left = neighbor;
        } 
        else if(dir.equals("up")) {
            this.top = neighbor;
        } 
        else if(dir.equals("bottom")) {
            this.bottom = neighbor;
        }
    }

    // Adds this image to the world image at its coordinates
    public WorldImage addCell() {
        return new RectangleImage(6, 6, OutlineMode.SOLID, this.cellColor);
    }

    // Returns this cell's location
    public Posn getPosn() {
        return this.pos;
    }
    
    // Changes the color of this tile as the water rises
    public void waterRising() {
        this.height = this.height - 1;
        
        // Tile is now at risk of flooding
        if(this.height < 0.1 && !this.isFlooded) {
            this.floodDanger = true;
        }
        this.cellColor = colorGen(this.height);
    }
    
    // Check for whether this should flood. Only called if below sea level
    public void floodedNeighbor() {
        IPred<Cell> p = new FloodedCheck();
        // Are any of this cell's neighbors flooded?
        if(p.apply(this.right) || p.apply(this.bottom) ||
                p.apply(this.left) || p.apply(this.top)) {
            // This cell is now flooded
            this.isFlooded = true;
            // No longer in danger, since it's flooded
            this.floodDanger = false;
            // Starts out as ocean blue
            this.cellColor = new Color(0, 0, 128);
        }
    }
}

// A cell with a height of 0 of less
class OceanCell extends Cell {

    // Similar constructor to a cell, color is blue by default
    OceanCell(int x, int y) {
        super(x, y);
        //Dark blue tiles
        this.cellColor = new Color(0, 0, 128);
        // Count as flooded for flood check
        this.isFlooded = true;
        //No longer in floodDanger
        this.floodDanger = false;
    }
    
    //Overrides the water rising method above to return this cell
    @Override
    public void waterRising() {
        return;
    }

}

// The game's class
class ForbiddenIslandWorld extends World {

    // All the cells of the game, including the ocean
    IList<Cell> board;
    int tickCount;

    // When the game is created, makes all the Cells
    ForbiddenIslandWorld(IHeightGeneration h) {
        
        this.tickCount = 1;

        // Makes a list of cells based on game type
        ArrayList<ArrayList<Double>> height = h.heightListGen();

        // Creates a Cell list from the heights
        ArrayList<ArrayList<Cell>> cells = new ArrayList<ArrayList<Cell>>();
        for(int i = 0; i <= ISLAND_SIZE; i++) {
            cells.add(i, new ArrayList<Cell>());
            for(int j = 0; j <= ISLAND_SIZE; j++) {

                // Makes a land cell if its height is greater than 0
                double newCellHeight = height.get(i).get(j);
                if(newCellHeight > 0.1) {
                    cells.get(i).add(j, new Cell(newCellHeight, i, j));
                } 
                else {
                    cells.get(i).add(j, new OceanCell(i, j));
                }
            }
        }
        
        // Calls function for initializing this cell's neighbors
        Utils u = new Utils();
        cells = u.cellNeighbors(cells);
        this.board = u.iListGen(cells);
    }

    // Defines an int constant
    static final int ISLAND_SIZE = 64;

    // the current height of the ocean
    int waterHeight;

    // Make the world
    public WorldScene makeScene() {
        WorldScene fullWorld = getEmptyScene();

        // Goes through the whole list, adding each to the world
        for(int i = 0; i < this.board.size(); i++) {
            Cell currCell = this.board.get(i);
            fullWorld.placeImageXY(currCell.addCell(), 
                    currCell.getPosn().x * 6 + 3, 
                    currCell.getPosn().y * 6 + 3);
        }
        
        return fullWorld;
    }
    
    // Every ten ticks, more of the tiles flood and tiles near flooding flood
    public void onTick() {
        this.tickCount++;
        //System.out.println(this.tickCount);
        
        // Floods more of the tiles if this hits 10 and resets
        if(this.tickCount > 9) {
            
            // Raises the water in each cell. Adds those at flood risk to list
            ArrayList<Integer> floodRiskCells = new ArrayList<Integer>();
            IPred<Cell> f = new FloodRiskCheck();
            
            //Gets the cell list and ups the water level on each one
            for(int i = 0; i < this.board.size(); i++) {
                this.board.get(i).waterRising();
                
                //Adds this cell's index to list if it's at risk of flooding
                if(f.apply(this.board.get(i))) {
                    floodRiskCells.add(i);
                }
            }
            
            //iterates multiple times cells will have to update based upon
            //newly flooded neighbors
            for(int j = 0; j < 3; j++) {
                //For each item in the list, checks whether it should be flood
                for(int i : floodRiskCells) {
                    this.board.get(i).floodedNeighbor();
                }
            }
            this.tickCount = 1;
        }
    }
}

// Interface for all types of map height generation
interface IHeightGeneration {

    ArrayList<ArrayList<Double>> heightListGen();

    // Distance determination
    default double manhattanDistanceCheck(int x, int y) {
        double center = ForbiddenIslandWorld.ISLAND_SIZE / 2;
        double xDist = Math.abs(x - center);
        double yDist = Math.abs(y - center);
        return (xDist + yDist);
    }

}

// Standard height as Manhattan distance generator
class ManhattanDistance implements IHeightGeneration {

    public ArrayList<ArrayList<Double>> heightListGen() {

        // New utility class for the distance check
        ArrayList<ArrayList<Double>> allCells = new ArrayList<ArrayList<Double>>();

        // Creates a new Array or Array for heights based on Manhattan distance
        for (int i = 0; i <= ForbiddenIslandWorld.ISLAND_SIZE; i++) {
            allCells.add(i, new ArrayList<Double>());
            for (int j = 0; j <= ForbiddenIslandWorld.ISLAND_SIZE; j++) {

                // Distance from center determination
                double distToCenter = this.manhattanDistanceCheck(i, j);
                if(distToCenter < 32) {
                    allCells.get(i).add(j, (32 - distToCenter));
                }
                else {
                    allCells.get(i).add(j, 0.0);
                }
            }
        }
        return allCells;
    }
}

//Random diamond game generator
class RandomDiamond implements IHeightGeneration {

    public ArrayList<ArrayList<Double>> heightListGen() {

        // New utility class for the distance check
        ArrayList<ArrayList<Double>> allCells = new ArrayList<ArrayList<Double>>();
        Random rand = new Random();

        // Creates a new Array of Array for randomly generated heights
        for (int i = 0; i <= ForbiddenIslandWorld.ISLAND_SIZE; i++) {
            allCells.add(i, new ArrayList<Double>());
            for (int j = 0; j <= ForbiddenIslandWorld.ISLAND_SIZE; j++) {
                if (this.manhattanDistanceCheck(i, j) < 32) {
                    double value = rand.nextInt(32) + 1;
                    allCells.get(i).add(j, value);
                }
                else {
                    allCells.get(i).add(j, 0.0);
                }
            }
        }
        return allCells;
    }
}

// IList
interface IList<T> {
    
    T get(int index);
    IList<T> add(T t);
    int size();
    
}

// A filled list
class ConsList<T> implements IList<T> {
    T first;
    IList<T> rest;

    // Initialize the list
    ConsList(T first, IList<T> rest) {
        this.first = first;
        this.rest = rest;
    }

    // Get function by index
    public T get(int index) {
        if (index == 0) {
            return this.first;
        } else {
            return this.rest.get(index - 1);
        }
    }
    
    //Insert this object at the end of rest
    public IList<T> add(T t) {
        this.rest = this.rest.add(t);
        return this;
    }
    
    public int size() {
        return 1 + this.rest.size();
    }
}

// An empty list
class MtList<T> implements IList<T> {

    // Shouldn't be called
    public T get(int index) {
        throw new RuntimeException("Index out of bounds on get");
    }
    
    //Insert the item here
    public IList<T> add(T t) {
        return new ConsList<T>(t, this);
    }
    
    public int size() {
        return 0;
    }
}

// Utility Functions for the game
class Utils {

    // Updates this cell and its neighbors by mutation
    public ArrayList<ArrayList<Cell>> cellNeighbors(ArrayList<ArrayList<Cell>> arr) {

        // If along one of the edges, sets the cells neighbors to self
        int farEdge = ForbiddenIslandWorld.ISLAND_SIZE;

        //Loops through each cell adjusting neighbors
        for(int x = 0; x <= farEdge; x++) {
            for(int y = 0; y <= farEdge; y++) {
                
                // Handles cells along the left or right
                if(x == 0) {
                    arr.get(x).get(y).cellLink(arr.get(x + 1).get(y), "right");
                    arr.get(x).get(y).cellLink(arr.get(x).get(y), "left");
                } 
                else if(x == farEdge) {
                    arr.get(x).get(y).cellLink(arr.get(x).get(y), "right");
                    arr.get(x).get(y).cellLink(arr.get(x - 1).get(y), "left");
                }
                else {
                    arr.get(x).get(y).cellLink(arr.get(x + 1).get(y), "right");
                    arr.get(x).get(y).cellLink(arr.get(x - 1).get(y), "left");
                }
        
                // Handles cells along the top or bottom
                if(y == 0) {
                    arr.get(x).get(y).cellLink(arr.get(x).get(y), "up");
                } 
                else if(y == farEdge) {
                    arr.get(x).get(y).cellLink(arr.get(x).get(y - 1), "up");
                    arr.get(x).get(y).cellLink(arr.get(x).get(y), "bottom");
                } 
                else {
                    arr.get(x).get(y).cellLink(arr.get(x).get(y - 1), "up");
                    arr.get(x).get(y).cellLink(arr.get(x).get(y + 1), "bottom");
                }
            }
        }
        
        return arr;
    }
    
    //Takes in a list an ArrayList of ArrayList of cells and produces an IList
    IList<Cell> iListGen(ArrayList<ArrayList<Cell>> arr) {
        IList<Cell> cellList = new MtList<Cell>();
        for (int i = 0; i <= ForbiddenIslandWorld.ISLAND_SIZE; i++) {
            for (int j = 0; j <= ForbiddenIslandWorld.ISLAND_SIZE; j++) {
                cellList = new ConsList<Cell>(arr.get(i).get(j), cellList);
            }
        }
        return cellList;
    }
}

//predicate interface
interface IPred<T> {
    boolean apply(T t);
}

//is this cell at flood risk?
class FloodRiskCheck implements IPred<Cell> {
    public boolean apply(Cell c) {
        return c.floodDanger;
    }
}

//is this cell already flooded
class FloodedCheck implements IPred<Cell> {
    public boolean apply(Cell c) {
        return c.isFlooded;
    }
}

// The game itself
class ExamplesForbiddenIsland {

    void testGame(Tester t) {
        ForbiddenIslandWorld g = new ForbiddenIslandWorld(new RandomDiamond());
        g.bigBang(6 * (ForbiddenIslandWorld.ISLAND_SIZE+1), 6 * (ForbiddenIslandWorld.ISLAND_SIZE+1), 0.005);
    }

}
